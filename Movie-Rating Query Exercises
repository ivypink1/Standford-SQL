SQL###  Movie-Rating Query Exercises ###
Q1. Find the titles of all movies directed by Steven Spielberg. 
select title from Movie where director = "Steven Spielberg"

Q2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. 
select distinct year from Movie, Rating on (Movie.mID = Rating.mID)
where stars >=4 
order by year

Q3.Find the titles of all movies that have no ratings. 
select title from Movie
where mID not in
(select mID from Rating)

Q4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. 
select name from 
reviewer join rating
where reviewer.rID = rating.rID
and ratingDate is NULL

Q5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. 
select reviewer.name, movie.title, rating.stars, rating.ratingDate
from movie join rating join reviewer
where movie.mID = rating.mID and rating.rID = reviewer.rID
order by reviewer.name, movie.title, rating.stars

Q6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. 
select reviewer.name, movie.title
from reviewer, movie
where rID in
(select r1.rID from
    rating r1 join rating r2 where r1.rID = r2.rID and r1.mID = r2.mID
    and r1.stars < r2.stars and r1.ratingDate < r2.ratingDate)
and mID in
(select r1.mID from
    rating r1 join rating r2 where r1.rID= r2.rID and r1.mID = r2.mID
    and r1.stars < r2.stars and r1.ratingDate < r2.ratingDate)

Q7.For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. 
select movie.title, max_star from
movie join
(select mID, max(stars) as max_star 
from rating
group by mID) MAX
where movie.mID = MAX.mID
order by movie.title

Q8. For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. 
select title, (mx-mn)as rating_spread
from movie join (
select mID, max(stars) as mx, min(stars) as mn from 
rating 
group by mID) max_min
where movie.mID= max_min.mID
order by rating_spread desc, title

Q9. Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980.
(Make sure to calculate the average rating for each movie, then the average of those averages 
for movies before 1980 and movies after. Don't just calculate the overall average rating before and 
after 1980.) 
select abs(E.AVG_E-L.AVG_L) from
(select AVG(A. AVG_before_1980) as AVG_E, 'post' as type from
(select before_1980.mID as mID, avg(stars) as AVG_before_1980 from
(select movie.mID as mID, rating.stars as stars
from movie join rating
where movie.mID =rating.mID
and year <1980) as before_1980 
group by before_1980.mID) A) E
join
(select AVG(B.AVG_after_1980) as AVG_L, 'post' as type from
(select after_1980.mID as mID, avg(stars) as AVG_after_1980 from
(select movie.mID as mID, rating.stars as stars
from movie join rating
where movie.mID =rating.mID
and year >1980) as after_1980 
group by after_1980.mID) B) L
on E.type = L.type

